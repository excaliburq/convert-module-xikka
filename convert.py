from .. import loader, utils
import aiohttp

@loader.tds
class CurrencyConverter(loader.Module):
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API open.er-api.com (–±–µ–∑ –∫–ª—é—á–∞)"""

    strings = {
        "name": "CurrencyConverter",
        "usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n!currency <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É>\n–ü—Ä–∏–º–µ—Ä:\n!currency 100 USD EUR",
        "error": "‚ùó –û—à–∏–±–∫–∞: {error}",
        "result": "üí± {amount} {from_currency} = {converted:.2f} {to_currency}",
        "currencies_list": "üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n{currencies}"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.rates = None
        self.base = None
        self.currencies = None

    async def fetch_rates(self, base):
        url = f"https://open.er-api.com/v6/latest/{base}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                if data.get("result") != "success":
                    return None
                return data

    @loader.command()
    async def currency(self, message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é"""
        args = utils.get_args_raw(message)
        parts = args.split()
        if len(parts) != 3:
            return await message.edit(self.strings["usage"])

        amount_str, from_currency, to_currency = parts
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()

        try:
            amount = float(amount_str.replace(',', '.'))
        except ValueError:
            return await message.edit(self.strings["error"].format(error="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))

        if self.base != from_currency or not self.rates:
            data = await self.fetch_rates(from_currency)
            if not data:
                return await message.edit(self.strings["error"].format(error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"))
            self.rates = data.get("rates", {})
            self.base = from_currency
            self.currencies = sorted(self.rates.keys())

        if to_currency not in self.rates:
            return await message.edit(self.strings["error"].format(error=f"–í–∞–ª—é—Ç–∞ {to_currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"))

        rate = self.rates[to_currency]
        converted = amount * rate

        await message.edit(self.strings["result"].format(
            amount=amount,
            from_currency=from_currency,
            to_currency=to_currency,
            converted=converted
        ))

    @loader.command()
    async def currencylist(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        if not self.currencies:
            data = await self.fetch_rates("USD")
            if not data:
                return await message.edit("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
            self.rates = data.get("rates", {})
            self.base = "USD"
            self.currencies = sorted(self.rates.keys())

        lines = "\n".join(self.currencies)
        await message.edit(self.strings["currencies_list"].format(currencies=lines))

