from .. import loader, utils
import aiohttp

@loader.tds
class CurrencyConverter(loader.Module):
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –≤–∞–ª—é—Ç"""

    strings = {
        "name": "CurrencyConverter",
        "usage": ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                  "!currency <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É>\n"
                  "–ü—Ä–∏–º–µ—Ä:\n!currency 100 USD EUR\n\n"
                  "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:\n"
                  "!currencylist"),
        "error": "‚ùó –û—à–∏–±–∫–∞: {error}",
        "result": "üí± {amount} {from_currency} = {converted:.2f} {to_currency}",
        "currencies_by_region": "üåç –í–∞–ª—é—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:\n\n{regions}\n\nüìÑ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n{all_currencies}"
    }

    REGION_CURRENCIES = {
        "–ï–≤—Ä–æ–ø–∞": [
            "EUR", "GBP", "CHF", "SEK", "NOK", "DKK", "RUB", "UAH", "CZK", "PLN", "HUF",
            "BGN", "HRK", "RON", "ISK", "MKD", "MDL", "BYN", "GEL"
        ],
        "–ê–∑–∏—è": [
            "CNY", "JPY", "INR", "KRW", "SGD", "THB", "MYR", "IDR", "PHP", "VND", "PKR",
            "BDT", "LKR", "NPR", "KZT", "UZS", "TWD", "HKD"
        ],
        "–ê–º–µ—Ä–∏–∫–∞": [
            "USD", "CAD", "MXN", "BRL", "ARS", "CLP", "COP", "PEN", "UYU", "VEF", "GTQ",
            "BOB", "PYG", "CRC", "HTG"
        ],
        "–û–∫–µ–∞–Ω–∏—è": [
            "AUD", "NZD", "FJD", "PGK", "SBD"
        ],
        "–ê—Ñ—Ä–∏–∫–∞": [
            "ZAR", "EGP", "NGN", "KES", "GHS", "DZD", "MAD", "TND", "TZS", "UGX", "XOF", "XAF"
        ],
    }

    async def client_ready(self, client, db):
        self.client = client
        self.rates = None
        self.base = None
        self.currencies = None

    async def fetch_rates(self, base):
        url = f"https://open.er-api.com/v6/latest/{base}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                if data.get("result") != "success":
                    return None
                return data

    @loader.command()
    async def currency(self, message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é"""
        args = utils.get_args_raw(message)
        parts = args.split()
        if len(parts) != 3:
            return await message.edit(self.strings["usage"])

        amount_str, from_currency, to_currency = parts
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()

        try:
            amount = float(amount_str.replace(',', '.'))
        except ValueError:
            return await message.edit(self.strings["error"].format(error="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))

        if self.base != from_currency or not self.rates:
            data = await self.fetch_rates(from_currency)
            if not data:
                return await message.edit(self.strings["error"].format(error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"))
            self.rates = data.get("rates", {})
            self.base = from_currency
            self.currencies = sorted(self.rates.keys())

        if to_currency not in self.rates:
            return await message.edit(self.strings["error"].format(error=f"–í–∞–ª—é—Ç–∞ {to_currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"))

        rate = self.rates[to_currency]
        converted = amount * rate

        await message.edit(self.strings["result"].format(
            amount=amount,
            from_currency=from_currency,
            to_currency=to_currency,
            converted=converted
        ))

    @loader.command()
    async def currencylist(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–ª—é—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"""

        if not self.currencies:
            data = await self.fetch_rates("USD")
            if not data:
                return await message.edit("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
            self.rates = data.get("rates", {})
            self.base = "USD"
            self.currencies = sorted(self.rates.keys())

        currency_to_region = {}
        for region, codes in self.REGION_CURRENCIES.items():
            for c in codes:
                currency_to_region[c] = region

        region_groups = {region: [] for region in self.REGION_CURRENCIES.keys()}
        region_groups["–ü—Ä–æ—á–∏–µ"] = []

        for c in self.currencies:
            if c in currency_to_region:
                region_groups[currency_to_region[c]].append(c)
            else:
                region_groups["–ü—Ä–æ—á–∏–µ"].append(c)

        lines = []
        for region, codes in region_groups.items():
            if not codes:
                continue
            codes_sorted = sorted(codes)
            lines.append(f"üåç {region}: {', '.join(codes_sorted)}")

        all_currencies_line = "  ".join(self.currencies)

        text = self.strings["currencies_by_region"].format(
            regions="\n".join(lines),
            all_currencies=all_currencies_line
        )
        await message.edit(text)
